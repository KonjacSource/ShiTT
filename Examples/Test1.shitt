data Imf {A B : U} (f : A -> B) : (_ : B) -> U where 
| imf : (x : A) -> ... (f x) 

-- fun invf {A B : U} (f : A -> B) (y : B) (_ : Imf f y) : A where 
-- | f y (imf x) = traceContext[x]  

data Either (A B : U) : U where 
| left  : (_ : A) -> ...
| right : (_ : B) -> ...

data Unit : U where 
| unit : ...

data Bool : U where 
| true : ... 
| false : ...


fun invfEither {A B : U} (f : A -> B) (y : B) (_ : Either Unit (Imf f y)) : Either B A where 
| {A} {B} f y (right (imf x)) = traceContext[right x] -- here y is     inaccessible
-- | {A} {B} f y (left unit)     = left y  -- here y is not inaccessible