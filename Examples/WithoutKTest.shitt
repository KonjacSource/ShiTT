data Id {A : U} : (x y : A) -> U where 
| refl : (t : A) -> ... t t 

-- OK
fun uip {B : U} {x x1 : B} (p q: Id x x1) : Id {Id x x1} p q where 
| (refl _) (refl _) = refl (refl _)

-- OK
fun K {A : U} {a : A} (P : Id a a -> U) (p : P (refl _)) (e : Id a a) : P e where 
| P p (refl _) = p

#withoutK

-- OK
fun J {A : U} {a : A} (P : (b : A) -> Id a b -> U) (p : P a (refl _)) (b : A) (e : Id a b) : P b e 
| P p b (refl _) = p 

-- not OK
fun K1 {A : U} {a : A} (P : Id a a -> U) (p : P (refl _)) (e : Id a a) : P e where 
| P p (refl _) = p

-- not OK
fun uip1 {B : U} {x x1 : B} (p q: Id x x1) : Id {Id x x1} p q where 
| (refl _) (refl _) = refl (refl _)

-- not OK
fun weakK 
  {A : U} {a : A} 
  (P : Id {Id a a} (refl _) (refl _) -> U) 
  (p : P (refl _)) (e : Id {Id a a} (refl _) (refl _))
: P e where 
| P p (refl _) = p