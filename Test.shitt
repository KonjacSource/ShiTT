--- Types
data N : U where  
| zero : ...  
| succ : (pre : N) -> ...  

higher inductive Int : U where 
| pos : (n : N) -> ... 
| neg : (n : N) -> ... 
    when 
    | zero = pos zero

#eval neg zero

-- fun abs (n : Int) : N where 
-- | neg n = succ n
-- | pos n = n

-- #eval neg zero

-- #eval bcon {U} true false